/**
 * Folkeregisteret - offentlig med hjemmel
 *
 * Dokumentasjonen av tjenestene via swaggerhub er under testing.  Beskrivelsene under dokumenterer rettighetspakken Offentlig med hjemmel.  Tilgang til API-et styres med OAuth2-baserte access_tokens.  Mer informasjon om tjenestene, hvordan du får tilgang og finnes på [folkeregisteret-api-dokumentasjon](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/konsumenttjenester/)  Dokumentasjonen kan foreløpig ikke benyttes til kall mot Folkeregisterets testmiljøer.
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package im.kny.jacksonspeedup.offentligmedhjemmel.models

import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1IdentifiserendeInformasjon

import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonParser
import com.fasterxml.jackson.core.JsonToken
import com.fasterxml.jackson.databind.DeserializationContext
import com.fasterxml.jackson.databind.JsonDeserializer
import com.fasterxml.jackson.databind.type.*


/**
 * 
 *
 * @param aarsak 
 * @param ajourholdstidspunkt 
 * @param erFalsk 
 * @param gyldighetstidspunkt 
 * @param kilde 
 * @param opphoerstidspunkt 
 * @param rettIdentitetErUkjent 
 * @param rettIdentitetVedIdentifikasjonsnummer 
 * @param rettIdentitetVedOpplysninger 
 */

data class Folkeregisterettilgjengeliggjoeringhendelsev1FalskIdentitet (

    @field:JsonProperty("aarsak")
    val aarsak: kotlin.String? = null,

    @field:JsonProperty("ajourholdstidspunkt")
    val ajourholdstidspunkt: java.time.OffsetDateTime? = null,

    @field:JsonProperty("erFalsk")
    val erFalsk: kotlin.Boolean? = null,

    @field:JsonProperty("gyldighetstidspunkt")
    val gyldighetstidspunkt: java.time.OffsetDateTime? = null,

    @field:JsonProperty("kilde")
    val kilde: kotlin.String? = null,

    @field:JsonProperty("opphoerstidspunkt")
    val opphoerstidspunkt: java.time.OffsetDateTime? = null,

    @field:JsonProperty("rettIdentitetErUkjent")
    val rettIdentitetErUkjent: kotlin.Boolean? = null,

    @field:JsonProperty("rettIdentitetVedIdentifikasjonsnummer")
    val rettIdentitetVedIdentifikasjonsnummer: kotlin.String? = null,

    @field:JsonProperty("rettIdentitetVedOpplysninger")
    val rettIdentitetVedOpplysninger: Folkeregisterettilgjengeliggjoeringhendelsev1IdentifiserendeInformasjon? = null

) {

    class ParsedValues{
        var aarsak: kotlin.String? = null
        var ajourholdstidspunkt: java.time.OffsetDateTime? = null
        var erFalsk: kotlin.Boolean? = null
        var gyldighetstidspunkt: java.time.OffsetDateTime? = null
        var kilde: kotlin.String? = null
        var opphoerstidspunkt: java.time.OffsetDateTime? = null
        var rettIdentitetErUkjent: kotlin.Boolean? = null
        var rettIdentitetVedIdentifikasjonsnummer: kotlin.String? = null
        var rettIdentitetVedOpplysninger: Folkeregisterettilgjengeliggjoeringhendelsev1IdentifiserendeInformasjon? = null
    }

    @Suppress("UNUSED_VALUE")
    class Deserializer : JsonDeserializer<Folkeregisterettilgjengeliggjoeringhendelsev1FalskIdentitet>() {
        override fun deserialize(p: JsonParser, ctx: DeserializationContext): Folkeregisterettilgjengeliggjoeringhendelsev1FalskIdentitet {
            val parsedValues = ParsedValues()
            var curr = p.currentToken
            if (curr != JsonToken.START_OBJECT) {
                throw IllegalStateException("Should be start object")
            }
            curr = p.nextToken()
            while (curr == JsonToken.FIELD_NAME) {
                val field = p.text
                curr = p.nextToken()
                when (field) {

                    "aarsak" -> parsedValues.aarsak = p.text
                    "ajourholdstidspunkt" -> parsedValues.ajourholdstidspunkt = java.time.OffsetDateTime.parse(p.text)
                    "erFalsk" -> parsedValues.erFalsk = p.text.toBoolean()
                    "gyldighetstidspunkt" -> parsedValues.gyldighetstidspunkt = java.time.OffsetDateTime.parse(p.text)
                    "kilde" -> parsedValues.kilde = p.text
                    "opphoerstidspunkt" -> parsedValues.opphoerstidspunkt = java.time.OffsetDateTime.parse(p.text)
                    "rettIdentitetErUkjent" -> parsedValues.rettIdentitetErUkjent = p.text.toBoolean()
                    "rettIdentitetVedIdentifikasjonsnummer" -> parsedValues.rettIdentitetVedIdentifikasjonsnummer = p.text
                    "rettIdentitetVedOpplysninger" -> parsedValues.rettIdentitetVedOpplysninger = Folkeregisterettilgjengeliggjoeringhendelsev1IdentifiserendeInformasjon.deserializer.deserialize(p, ctx)

                    else -> p.skipChildren()
                }
                curr = p.nextToken()
            }
            return Folkeregisterettilgjengeliggjoeringhendelsev1FalskIdentitet(
                aarsak = parsedValues.aarsak,
                ajourholdstidspunkt = parsedValues.ajourholdstidspunkt,
                erFalsk = parsedValues.erFalsk,
                gyldighetstidspunkt = parsedValues.gyldighetstidspunkt,
                kilde = parsedValues.kilde,
                opphoerstidspunkt = parsedValues.opphoerstidspunkt,
                rettIdentitetErUkjent = parsedValues.rettIdentitetErUkjent,
                rettIdentitetVedIdentifikasjonsnummer = parsedValues.rettIdentitetVedIdentifikasjonsnummer,
                rettIdentitetVedOpplysninger = parsedValues.rettIdentitetVedOpplysninger,)
        }
    }
    companion object {
        val deserializer by lazy(LazyThreadSafetyMode.NONE) { Deserializer() }
    }

}

