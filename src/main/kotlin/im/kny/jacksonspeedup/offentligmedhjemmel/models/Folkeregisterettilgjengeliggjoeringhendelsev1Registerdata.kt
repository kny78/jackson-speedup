/**
 * Folkeregisteret - offentlig med hjemmel
 *
 * Dokumentasjonen av tjenestene via swaggerhub er under testing.  Beskrivelsene under dokumenterer rettighetspakken Offentlig med hjemmel.  Tilgang til API-et styres med OAuth2-baserte access_tokens.  Mer informasjon om tjenestene, hvordan du får tilgang og finnes på [folkeregisteret-api-dokumentasjon](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/konsumenttjenester/)  Dokumentasjonen kan foreløpig ikke benyttes til kall mot Folkeregisterets testmiljøer.
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package im.kny.jacksonspeedup.offentligmedhjemmel.models

import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1BibeholdAvNorskStatsborgerskap
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Bostedsadresse
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1DeltBosted
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Doedsfall
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1FalskIdentitet
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Familierelasjon
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Foedsel
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1FoedselINorge
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Folkeregisteridentifikator
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Folkeregisterpersonnavn
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Folkeregisterpersonstatus
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Foreldreansvar
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1GraderingAvAdresse
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Identifikasjonsdokument
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Identitetsgrunnlag
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1InnflyttingTilNorge
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Kontaktadresse
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1KontaktadresseIUtlandet
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1KontaktinformasjonForDoedsbo
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Opphold
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1OppholdPaaSvalbard
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Oppholdsadresse
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Personidentifikasjon
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Personkjoenn
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1SametingetsValgmanntall
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1SamiskSpraak
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Sivilstand
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1Statsborgerskap
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1UtflyttingFraNorge
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringhendelsev1VergemaalRepresentasjonEllerFremtidsfullmakt

import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonParser
import com.fasterxml.jackson.core.JsonToken
import com.fasterxml.jackson.databind.DeserializationContext
import com.fasterxml.jackson.databind.JsonDeserializer
import com.fasterxml.jackson.databind.type.*


/**
 * 
 *
 * @param entitet 
 * @param entitetsendring 
 * @param adressebeskyttelse 
 * @param bibehold 
 * @param bostedsadresse 
 * @param brukAvSamiskSpraak 
 * @param deltBosted 
 * @param doedsfall 
 * @param falskIdentitet 
 * @param familierelasjon 
 * @param foedsel 
 * @param foedselINorge 
 * @param foreldreansvar 
 * @param forholdTilSametingetsValgmanntall 
 * @param identifikasjonsnummer 
 * @param identitetsgrunnlag 
 * @param innflytting 
 * @param kjoenn 
 * @param kontaktinformasjonForDoedsbo 
 * @param legitimasjonsdokument 
 * @param navn 
 * @param opphold 
 * @param oppholdPaaSvalbard 
 * @param oppholdsadresse 
 * @param postadresse 
 * @param postadresseIUtlandet 
 * @param sivilstand 
 * @param statsborgerskap 
 * @param status 
 * @param utenlandskPersonidentifikasjon 
 * @param utflytting 
 * @param utlendingsmyndighetenesIdentifikasjonsnummer 
 * @param vergemaalEllerFremtidsfullmakt 
 */

data class Folkeregisterettilgjengeliggjoeringhendelsev1Registerdata (

    @field:JsonProperty("entitet")
    val entitet: Folkeregisterettilgjengeliggjoeringhendelsev1Registerdata.Entitet,

    @field:JsonProperty("entitetsendring")
    val entitetsendring: Folkeregisterettilgjengeliggjoeringhendelsev1Registerdata.Entitetsendring,

    @field:JsonProperty("adressebeskyttelse")
    val adressebeskyttelse: Folkeregisterettilgjengeliggjoeringhendelsev1GraderingAvAdresse? = null,

    @field:JsonProperty("bibehold")
    val bibehold: Folkeregisterettilgjengeliggjoeringhendelsev1BibeholdAvNorskStatsborgerskap? = null,

    @field:JsonProperty("bostedsadresse")
    val bostedsadresse: Folkeregisterettilgjengeliggjoeringhendelsev1Bostedsadresse? = null,

    @field:JsonProperty("brukAvSamiskSpraak")
    val brukAvSamiskSpraak: Folkeregisterettilgjengeliggjoeringhendelsev1SamiskSpraak? = null,

    @field:JsonProperty("deltBosted")
    val deltBosted: Folkeregisterettilgjengeliggjoeringhendelsev1DeltBosted? = null,

    @field:JsonProperty("doedsfall")
    val doedsfall: Folkeregisterettilgjengeliggjoeringhendelsev1Doedsfall? = null,

    @field:JsonProperty("falskIdentitet")
    val falskIdentitet: Folkeregisterettilgjengeliggjoeringhendelsev1FalskIdentitet? = null,

    @field:JsonProperty("familierelasjon")
    val familierelasjon: Folkeregisterettilgjengeliggjoeringhendelsev1Familierelasjon? = null,

    @field:JsonProperty("foedsel")
    val foedsel: Folkeregisterettilgjengeliggjoeringhendelsev1Foedsel? = null,

    @field:JsonProperty("foedselINorge")
    val foedselINorge: Folkeregisterettilgjengeliggjoeringhendelsev1FoedselINorge? = null,

    @field:JsonProperty("foreldreansvar")
    val foreldreansvar: Folkeregisterettilgjengeliggjoeringhendelsev1Foreldreansvar? = null,

    @field:JsonProperty("forholdTilSametingetsValgmanntall")
    val forholdTilSametingetsValgmanntall: Folkeregisterettilgjengeliggjoeringhendelsev1SametingetsValgmanntall? = null,

    @field:JsonProperty("identifikasjonsnummer")
    val identifikasjonsnummer: Folkeregisterettilgjengeliggjoeringhendelsev1Folkeregisteridentifikator? = null,

    @field:JsonProperty("identitetsgrunnlag")
    val identitetsgrunnlag: Folkeregisterettilgjengeliggjoeringhendelsev1Identitetsgrunnlag? = null,

    @field:JsonProperty("innflytting")
    val innflytting: Folkeregisterettilgjengeliggjoeringhendelsev1InnflyttingTilNorge? = null,

    @field:JsonProperty("kjoenn")
    val kjoenn: Folkeregisterettilgjengeliggjoeringhendelsev1Personkjoenn? = null,

    @field:JsonProperty("kontaktinformasjonForDoedsbo")
    val kontaktinformasjonForDoedsbo: Folkeregisterettilgjengeliggjoeringhendelsev1KontaktinformasjonForDoedsbo? = null,

    @field:JsonProperty("legitimasjonsdokument")
    val legitimasjonsdokument: Folkeregisterettilgjengeliggjoeringhendelsev1Identifikasjonsdokument? = null,

    @field:JsonProperty("navn")
    val navn: Folkeregisterettilgjengeliggjoeringhendelsev1Folkeregisterpersonnavn? = null,

    @field:JsonProperty("opphold")
    val opphold: Folkeregisterettilgjengeliggjoeringhendelsev1Opphold? = null,

    @field:JsonProperty("oppholdPaaSvalbard")
    val oppholdPaaSvalbard: Folkeregisterettilgjengeliggjoeringhendelsev1OppholdPaaSvalbard? = null,

    @field:JsonProperty("oppholdsadresse")
    val oppholdsadresse: Folkeregisterettilgjengeliggjoeringhendelsev1Oppholdsadresse? = null,

    @field:JsonProperty("postadresse")
    val postadresse: Folkeregisterettilgjengeliggjoeringhendelsev1Kontaktadresse? = null,

    @field:JsonProperty("postadresseIUtlandet")
    val postadresseIUtlandet: Folkeregisterettilgjengeliggjoeringhendelsev1KontaktadresseIUtlandet? = null,

    @field:JsonProperty("sivilstand")
    val sivilstand: Folkeregisterettilgjengeliggjoeringhendelsev1Sivilstand? = null,

    @field:JsonProperty("statsborgerskap")
    val statsborgerskap: Folkeregisterettilgjengeliggjoeringhendelsev1Statsborgerskap? = null,

    @field:JsonProperty("status")
    val status: Folkeregisterettilgjengeliggjoeringhendelsev1Folkeregisterpersonstatus? = null,

    @field:JsonProperty("utenlandskPersonidentifikasjon")
    val utenlandskPersonidentifikasjon: Folkeregisterettilgjengeliggjoeringhendelsev1Personidentifikasjon? = null,

    @field:JsonProperty("utflytting")
    val utflytting: Folkeregisterettilgjengeliggjoeringhendelsev1UtflyttingFraNorge? = null,

    @field:JsonProperty("utlendingsmyndighetenesIdentifikasjonsnummer")
    val utlendingsmyndighetenesIdentifikasjonsnummer: Folkeregisterettilgjengeliggjoeringhendelsev1Personidentifikasjon? = null,

    @field:JsonProperty("vergemaalEllerFremtidsfullmakt")
    val vergemaalEllerFremtidsfullmakt: Folkeregisterettilgjengeliggjoeringhendelsev1VergemaalRepresentasjonEllerFremtidsfullmakt? = null

) {

    /**
     * 
     *
     * Values: falskIdentitet,identifikasjonsnummer,identitetsgrunnlag,utlendingsmyndighetenesIdentifikasjonsnummer,legitimasjonsdokument,utenlandskPersonidentifikasjon,kontaktinformasjonForDoedsbo,status,deltBosted,kjoenn,foedsel,foedselINorge,sivilstand,familierelasjon,doedsfall,navn,adressebeskyttelse,bostedsadresse,oppholdsadresse,innflytting,utflytting,brukAvSamiskSpraak,forholdTilSametingetsValgmanntall,kontaktadresse,kontaktadresseIUtlandet,foreldreansvar,statsborgerskap,bibehold,opphold,vergemaalEllerFremtidsfullmakt
     */
    enum class Entitet(val value: kotlin.String) {
        @JsonProperty(value = "falskIdentitet") falskIdentitet("falskIdentitet"),
        @JsonProperty(value = "identifikasjonsnummer") identifikasjonsnummer("identifikasjonsnummer"),
        @JsonProperty(value = "identitetsgrunnlag") identitetsgrunnlag("identitetsgrunnlag"),
        @JsonProperty(value = "utlendingsmyndighetenesIdentifikasjonsnummer") utlendingsmyndighetenesIdentifikasjonsnummer("utlendingsmyndighetenesIdentifikasjonsnummer"),
        @JsonProperty(value = "legitimasjonsdokument") legitimasjonsdokument("legitimasjonsdokument"),
        @JsonProperty(value = "utenlandskPersonidentifikasjon") utenlandskPersonidentifikasjon("utenlandskPersonidentifikasjon"),
        @JsonProperty(value = "kontaktinformasjonForDoedsbo") kontaktinformasjonForDoedsbo("kontaktinformasjonForDoedsbo"),
        @JsonProperty(value = "status") status("status"),
        @JsonProperty(value = "deltBosted") deltBosted("deltBosted"),
        @JsonProperty(value = "kjoenn") kjoenn("kjoenn"),
        @JsonProperty(value = "foedsel") foedsel("foedsel"),
        @JsonProperty(value = "foedselINorge") foedselINorge("foedselINorge"),
        @JsonProperty(value = "sivilstand") sivilstand("sivilstand"),
        @JsonProperty(value = "familierelasjon") familierelasjon("familierelasjon"),
        @JsonProperty(value = "doedsfall") doedsfall("doedsfall"),
        @JsonProperty(value = "navn") navn("navn"),
        @JsonProperty(value = "adressebeskyttelse") adressebeskyttelse("adressebeskyttelse"),
        @JsonProperty(value = "bostedsadresse") bostedsadresse("bostedsadresse"),
        @JsonProperty(value = "oppholdsadresse") oppholdsadresse("oppholdsadresse"),
        @JsonProperty(value = "innflytting") innflytting("innflytting"),
        @JsonProperty(value = "utflytting") utflytting("utflytting"),
        @JsonProperty(value = "brukAvSamiskSpraak") brukAvSamiskSpraak("brukAvSamiskSpraak"),
        @JsonProperty(value = "forholdTilSametingetsValgmanntall") forholdTilSametingetsValgmanntall("forholdTilSametingetsValgmanntall"),
        @JsonProperty(value = "kontaktadresse") kontaktadresse("kontaktadresse"),
        @JsonProperty(value = "kontaktadresseIUtlandet") kontaktadresseIUtlandet("kontaktadresseIUtlandet"),
        @JsonProperty(value = "foreldreansvar") foreldreansvar("foreldreansvar"),
        @JsonProperty(value = "statsborgerskap") statsborgerskap("statsborgerskap"),
        @JsonProperty(value = "bibehold") bibehold("bibehold"),
        @JsonProperty(value = "opphold") opphold("opphold"),
        @JsonProperty(value = "vergemaalEllerFremtidsfullmakt") vergemaalEllerFremtidsfullmakt("vergemaalEllerFremtidsfullmakt");
    }
    /**
     * 
     *
     * Values: registrereNy,korrigere,annullere,korrigereHistorisk
     */
    enum class Entitetsendring(val value: kotlin.String) {
        @JsonProperty(value = "registrereNy") registrereNy("registrereNy"),
        @JsonProperty(value = "korrigere") korrigere("korrigere"),
        @JsonProperty(value = "annullere") annullere("annullere"),
        @JsonProperty(value = "korrigereHistorisk") korrigereHistorisk("korrigereHistorisk");
    }
    class ParsedValues{
        var entitet: Folkeregisterettilgjengeliggjoeringhendelsev1Registerdata.Entitet? = null
        var entitetsendring: Folkeregisterettilgjengeliggjoeringhendelsev1Registerdata.Entitetsendring? = null
        var adressebeskyttelse: Folkeregisterettilgjengeliggjoeringhendelsev1GraderingAvAdresse? = null
        var bibehold: Folkeregisterettilgjengeliggjoeringhendelsev1BibeholdAvNorskStatsborgerskap? = null
        var bostedsadresse: Folkeregisterettilgjengeliggjoeringhendelsev1Bostedsadresse? = null
        var brukAvSamiskSpraak: Folkeregisterettilgjengeliggjoeringhendelsev1SamiskSpraak? = null
        var deltBosted: Folkeregisterettilgjengeliggjoeringhendelsev1DeltBosted? = null
        var doedsfall: Folkeregisterettilgjengeliggjoeringhendelsev1Doedsfall? = null
        var falskIdentitet: Folkeregisterettilgjengeliggjoeringhendelsev1FalskIdentitet? = null
        var familierelasjon: Folkeregisterettilgjengeliggjoeringhendelsev1Familierelasjon? = null
        var foedsel: Folkeregisterettilgjengeliggjoeringhendelsev1Foedsel? = null
        var foedselINorge: Folkeregisterettilgjengeliggjoeringhendelsev1FoedselINorge? = null
        var foreldreansvar: Folkeregisterettilgjengeliggjoeringhendelsev1Foreldreansvar? = null
        var forholdTilSametingetsValgmanntall: Folkeregisterettilgjengeliggjoeringhendelsev1SametingetsValgmanntall? = null
        var identifikasjonsnummer: Folkeregisterettilgjengeliggjoeringhendelsev1Folkeregisteridentifikator? = null
        var identitetsgrunnlag: Folkeregisterettilgjengeliggjoeringhendelsev1Identitetsgrunnlag? = null
        var innflytting: Folkeregisterettilgjengeliggjoeringhendelsev1InnflyttingTilNorge? = null
        var kjoenn: Folkeregisterettilgjengeliggjoeringhendelsev1Personkjoenn? = null
        var kontaktinformasjonForDoedsbo: Folkeregisterettilgjengeliggjoeringhendelsev1KontaktinformasjonForDoedsbo? = null
        var legitimasjonsdokument: Folkeregisterettilgjengeliggjoeringhendelsev1Identifikasjonsdokument? = null
        var navn: Folkeregisterettilgjengeliggjoeringhendelsev1Folkeregisterpersonnavn? = null
        var opphold: Folkeregisterettilgjengeliggjoeringhendelsev1Opphold? = null
        var oppholdPaaSvalbard: Folkeregisterettilgjengeliggjoeringhendelsev1OppholdPaaSvalbard? = null
        var oppholdsadresse: Folkeregisterettilgjengeliggjoeringhendelsev1Oppholdsadresse? = null
        var postadresse: Folkeregisterettilgjengeliggjoeringhendelsev1Kontaktadresse? = null
        var postadresseIUtlandet: Folkeregisterettilgjengeliggjoeringhendelsev1KontaktadresseIUtlandet? = null
        var sivilstand: Folkeregisterettilgjengeliggjoeringhendelsev1Sivilstand? = null
        var statsborgerskap: Folkeregisterettilgjengeliggjoeringhendelsev1Statsborgerskap? = null
        var status: Folkeregisterettilgjengeliggjoeringhendelsev1Folkeregisterpersonstatus? = null
        var utenlandskPersonidentifikasjon: Folkeregisterettilgjengeliggjoeringhendelsev1Personidentifikasjon? = null
        var utflytting: Folkeregisterettilgjengeliggjoeringhendelsev1UtflyttingFraNorge? = null
        var utlendingsmyndighetenesIdentifikasjonsnummer: Folkeregisterettilgjengeliggjoeringhendelsev1Personidentifikasjon? = null
        var vergemaalEllerFremtidsfullmakt: Folkeregisterettilgjengeliggjoeringhendelsev1VergemaalRepresentasjonEllerFremtidsfullmakt? = null
    }
    class Deserializer : JsonDeserializer<Folkeregisterettilgjengeliggjoeringhendelsev1Registerdata>() {
        override fun deserialize(p: JsonParser, ctx: DeserializationContext): Folkeregisterettilgjengeliggjoeringhendelsev1Registerdata {
            val parsedValues = ParsedValues()
            var curr = p.currentToken
            if (curr != JsonToken.START_OBJECT) {
                throw IllegalStateException("Should be start object")
            }
            curr = p.nextToken()
            while (curr == JsonToken.FIELD_NAME) {
                val field = p.text
                p.nextToken()
                when (field) {

                    "entitet" -> parsedValues.entitet = Folkeregisterettilgjengeliggjoeringhendelsev1Registerdata.Entitet.valueOf(p.text)

                    "entitetsendring" -> parsedValues.entitetsendring = Folkeregisterettilgjengeliggjoeringhendelsev1Registerdata.Entitetsendring.valueOf(p.text)

                    "adressebeskyttelse" -> parsedValues.adressebeskyttelse = Folkeregisterettilgjengeliggjoeringhendelsev1GraderingAvAdresse.deserializer.deserialize(p, ctx)
                    "bibehold" -> parsedValues.bibehold = Folkeregisterettilgjengeliggjoeringhendelsev1BibeholdAvNorskStatsborgerskap.deserializer.deserialize(p, ctx)
                    "bostedsadresse" -> parsedValues.bostedsadresse = Folkeregisterettilgjengeliggjoeringhendelsev1Bostedsadresse.deserializer.deserialize(p, ctx)
                    "brukAvSamiskSpraak" -> parsedValues.brukAvSamiskSpraak = Folkeregisterettilgjengeliggjoeringhendelsev1SamiskSpraak.deserializer.deserialize(p, ctx)
                    "deltBosted" -> parsedValues.deltBosted = Folkeregisterettilgjengeliggjoeringhendelsev1DeltBosted.deserializer.deserialize(p, ctx)
                    "doedsfall" -> parsedValues.doedsfall = Folkeregisterettilgjengeliggjoeringhendelsev1Doedsfall.deserializer.deserialize(p, ctx)
                    "falskIdentitet" -> parsedValues.falskIdentitet = Folkeregisterettilgjengeliggjoeringhendelsev1FalskIdentitet.deserializer.deserialize(p, ctx)
                    "familierelasjon" -> parsedValues.familierelasjon = Folkeregisterettilgjengeliggjoeringhendelsev1Familierelasjon.deserializer.deserialize(p, ctx)
                    "foedsel" -> parsedValues.foedsel = Folkeregisterettilgjengeliggjoeringhendelsev1Foedsel.deserializer.deserialize(p, ctx)
                    "foedselINorge" -> parsedValues.foedselINorge = Folkeregisterettilgjengeliggjoeringhendelsev1FoedselINorge.deserializer.deserialize(p, ctx)
                    "foreldreansvar" -> parsedValues.foreldreansvar = Folkeregisterettilgjengeliggjoeringhendelsev1Foreldreansvar.deserializer.deserialize(p, ctx)
                    "forholdTilSametingetsValgmanntall" -> parsedValues.forholdTilSametingetsValgmanntall = Folkeregisterettilgjengeliggjoeringhendelsev1SametingetsValgmanntall.deserializer.deserialize(p, ctx)
                    "identifikasjonsnummer" -> parsedValues.identifikasjonsnummer = Folkeregisterettilgjengeliggjoeringhendelsev1Folkeregisteridentifikator.deserializer.deserialize(p, ctx)
                    "identitetsgrunnlag" -> parsedValues.identitetsgrunnlag = Folkeregisterettilgjengeliggjoeringhendelsev1Identitetsgrunnlag.deserializer.deserialize(p, ctx)
                    "innflytting" -> parsedValues.innflytting = Folkeregisterettilgjengeliggjoeringhendelsev1InnflyttingTilNorge.deserializer.deserialize(p, ctx)
                    "kjoenn" -> parsedValues.kjoenn = Folkeregisterettilgjengeliggjoeringhendelsev1Personkjoenn.deserializer.deserialize(p, ctx)
                    "kontaktinformasjonForDoedsbo" -> parsedValues.kontaktinformasjonForDoedsbo = Folkeregisterettilgjengeliggjoeringhendelsev1KontaktinformasjonForDoedsbo.deserializer.deserialize(p, ctx)
                    "legitimasjonsdokument" -> parsedValues.legitimasjonsdokument = Folkeregisterettilgjengeliggjoeringhendelsev1Identifikasjonsdokument.deserializer.deserialize(p, ctx)
                    "navn" -> parsedValues.navn = Folkeregisterettilgjengeliggjoeringhendelsev1Folkeregisterpersonnavn.deserializer.deserialize(p, ctx)
                    "opphold" -> parsedValues.opphold = Folkeregisterettilgjengeliggjoeringhendelsev1Opphold.deserializer.deserialize(p, ctx)
                    "oppholdPaaSvalbard" -> parsedValues.oppholdPaaSvalbard = Folkeregisterettilgjengeliggjoeringhendelsev1OppholdPaaSvalbard.deserializer.deserialize(p, ctx)
                    "oppholdsadresse" -> parsedValues.oppholdsadresse = Folkeregisterettilgjengeliggjoeringhendelsev1Oppholdsadresse.deserializer.deserialize(p, ctx)
                    "postadresse" -> parsedValues.postadresse = Folkeregisterettilgjengeliggjoeringhendelsev1Kontaktadresse.deserializer.deserialize(p, ctx)
                    "postadresseIUtlandet" -> parsedValues.postadresseIUtlandet = Folkeregisterettilgjengeliggjoeringhendelsev1KontaktadresseIUtlandet.deserializer.deserialize(p, ctx)
                    "sivilstand" -> parsedValues.sivilstand = Folkeregisterettilgjengeliggjoeringhendelsev1Sivilstand.deserializer.deserialize(p, ctx)
                    "statsborgerskap" -> parsedValues.statsborgerskap = Folkeregisterettilgjengeliggjoeringhendelsev1Statsborgerskap.deserializer.deserialize(p, ctx)
                    "status" -> parsedValues.status = Folkeregisterettilgjengeliggjoeringhendelsev1Folkeregisterpersonstatus.deserializer.deserialize(p, ctx)
                    "utenlandskPersonidentifikasjon" -> parsedValues.utenlandskPersonidentifikasjon = Folkeregisterettilgjengeliggjoeringhendelsev1Personidentifikasjon.deserializer.deserialize(p, ctx)
                    "utflytting" -> parsedValues.utflytting = Folkeregisterettilgjengeliggjoeringhendelsev1UtflyttingFraNorge.deserializer.deserialize(p, ctx)
                    "utlendingsmyndighetenesIdentifikasjonsnummer" -> parsedValues.utlendingsmyndighetenesIdentifikasjonsnummer = Folkeregisterettilgjengeliggjoeringhendelsev1Personidentifikasjon.deserializer.deserialize(p, ctx)
                    "vergemaalEllerFremtidsfullmakt" -> parsedValues.vergemaalEllerFremtidsfullmakt = Folkeregisterettilgjengeliggjoeringhendelsev1VergemaalRepresentasjonEllerFremtidsfullmakt.deserializer.deserialize(p, ctx)

                    else -> p.skipChildren()
                }
                curr = p.nextToken()
            }
            return Folkeregisterettilgjengeliggjoeringhendelsev1Registerdata(
                entitet = parsedValues.entitet!!,
                entitetsendring = parsedValues.entitetsendring!!,
                adressebeskyttelse = parsedValues.adressebeskyttelse,
                bibehold = parsedValues.bibehold,
                bostedsadresse = parsedValues.bostedsadresse,
                brukAvSamiskSpraak = parsedValues.brukAvSamiskSpraak,
                deltBosted = parsedValues.deltBosted,
                doedsfall = parsedValues.doedsfall,
                falskIdentitet = parsedValues.falskIdentitet,
                familierelasjon = parsedValues.familierelasjon,
                foedsel = parsedValues.foedsel,
                foedselINorge = parsedValues.foedselINorge,
                foreldreansvar = parsedValues.foreldreansvar,
                forholdTilSametingetsValgmanntall = parsedValues.forholdTilSametingetsValgmanntall,
                identifikasjonsnummer = parsedValues.identifikasjonsnummer,
                identitetsgrunnlag = parsedValues.identitetsgrunnlag,
                innflytting = parsedValues.innflytting,
                kjoenn = parsedValues.kjoenn,
                kontaktinformasjonForDoedsbo = parsedValues.kontaktinformasjonForDoedsbo,
                legitimasjonsdokument = parsedValues.legitimasjonsdokument,
                navn = parsedValues.navn,
                opphold = parsedValues.opphold,
                oppholdPaaSvalbard = parsedValues.oppholdPaaSvalbard,
                oppholdsadresse = parsedValues.oppholdsadresse,
                postadresse = parsedValues.postadresse,
                postadresseIUtlandet = parsedValues.postadresseIUtlandet,
                sivilstand = parsedValues.sivilstand,
                statsborgerskap = parsedValues.statsborgerskap,
                status = parsedValues.status,
                utenlandskPersonidentifikasjon = parsedValues.utenlandskPersonidentifikasjon,
                utflytting = parsedValues.utflytting,
                utlendingsmyndighetenesIdentifikasjonsnummer = parsedValues.utlendingsmyndighetenesIdentifikasjonsnummer,
                vergemaalEllerFremtidsfullmakt = parsedValues.vergemaalEllerFremtidsfullmakt,)
        }
    }
    companion object {
        val deserializer by lazy(LazyThreadSafetyMode.NONE) { Deserializer() }
    }

}

