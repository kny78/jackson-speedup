/**
 * Folkeregisteret - offentlig med hjemmel
 *
 * Dokumentasjonen av tjenestene via swaggerhub er under testing.  Beskrivelsene under dokumenterer rettighetspakken Offentlig med hjemmel.  Tilgang til API-et styres med OAuth2-baserte access_tokens.  Mer informasjon om tjenestene, hvordan du får tilgang og finnes på [folkeregisteret-api-dokumentasjon](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/konsumenttjenester/)  Dokumentasjonen kan foreløpig ikke benyttes til kall mot Folkeregisterets testmiljøer.
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package im.kny.jacksonspeedup.offentligmedhjemmel.models

import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringuttrekkv1requestKommunenummer

import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonParser
import com.fasterxml.jackson.core.JsonToken
import com.fasterxml.jackson.databind.DeserializationContext
import com.fasterxml.jackson.databind.JsonDeserializer
import com.fasterxml.jackson.databind.type.*


/**
 * 
 *
 * @param personstatustyper 
 * @param doedsaarFraOgMed 
 * @param doedsaarTilOgMed 
 * @param foedselsaarFraOgMed 
 * @param foedselsaarTilOgMed 
 * @param kjoenn 
 * @param kommunenummer 
 * @param sivilstandstype 
 * @param statsborgerskap 
 */

data class Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest (

    @field:JsonProperty("personstatustyper")
    val personstatustyper: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest.Personstatustyper>,

    @field:JsonProperty("doedsaarFraOgMed")
    val doedsaarFraOgMed: kotlin.String? = null,

    @field:JsonProperty("doedsaarTilOgMed")
    val doedsaarTilOgMed: kotlin.String? = null,

    @field:JsonProperty("foedselsaarFraOgMed")
    val foedselsaarFraOgMed: kotlin.String? = null,

    @field:JsonProperty("foedselsaarTilOgMed")
    val foedselsaarTilOgMed: kotlin.String? = null,

    @field:JsonProperty("kjoenn")
    val kjoenn: Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest.Kjoenn? = null,

    @field:JsonProperty("kommunenummer")
    val kommunenummer: Folkeregisterettilgjengeliggjoeringuttrekkv1requestKommunenummer? = null,

    @field:JsonProperty("sivilstandstype")
    val sivilstandstype: Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest.Sivilstandstype? = null,

    @field:JsonProperty("statsborgerskap")
    val statsborgerskap: kotlin.String? = null

) {

    /**
     * 
     *
     * Values: aktiv,bosatt,utflyttet,doed,inaktiv
     */
    enum class Personstatustyper(val value: kotlin.String) {
        @JsonProperty(value = "aktiv") aktiv("aktiv"),
        @JsonProperty(value = "bosatt") bosatt("bosatt"),
        @JsonProperty(value = "utflyttet") utflyttet("utflyttet"),
        @JsonProperty(value = "doed") doed("doed"),
        @JsonProperty(value = "inaktiv") inaktiv("inaktiv");
    }
    /**
     * 
     *
     * Values: kvinne,mann
     */
    enum class Kjoenn(val value: kotlin.String) {
        @JsonProperty(value = "kvinne") kvinne("kvinne"),
        @JsonProperty(value = "mann") mann("mann");
    }
    /**
     * 
     *
     * Values: uoppgitt,ugift,gift,enkeEllerEnkemann,skilt,separert,registrertPartner,separertPartner,skiltPartner,gjenlevendePartner
     */
    enum class Sivilstandstype(val value: kotlin.String) {
        @JsonProperty(value = "uoppgitt") uoppgitt("uoppgitt"),
        @JsonProperty(value = "ugift") ugift("ugift"),
        @JsonProperty(value = "gift") gift("gift"),
        @JsonProperty(value = "enkeEllerEnkemann") enkeEllerEnkemann("enkeEllerEnkemann"),
        @JsonProperty(value = "skilt") skilt("skilt"),
        @JsonProperty(value = "separert") separert("separert"),
        @JsonProperty(value = "registrertPartner") registrertPartner("registrertPartner"),
        @JsonProperty(value = "separertPartner") separertPartner("separertPartner"),
        @JsonProperty(value = "skiltPartner") skiltPartner("skiltPartner"),
        @JsonProperty(value = "gjenlevendePartner") gjenlevendePartner("gjenlevendePartner");
    }
    class ParsedValues{
        var personstatustyper: List<Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest.Personstatustyper>? = null
        var doedsaarFraOgMed: kotlin.String? = null
        var doedsaarTilOgMed: kotlin.String? = null
        var foedselsaarFraOgMed: kotlin.String? = null
        var foedselsaarTilOgMed: kotlin.String? = null
        var kjoenn: Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest.Kjoenn? = null
        var kommunenummer: Folkeregisterettilgjengeliggjoeringuttrekkv1requestKommunenummer? = null
        var sivilstandstype: Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest.Sivilstandstype? = null
        var statsborgerskap: kotlin.String? = null
    }
    class Deserializer : JsonDeserializer<Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest>() {
        override fun deserialize(p: JsonParser, ctx: DeserializationContext): Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest {
            val parsedValues = ParsedValues()
            var curr = p.currentToken
            if (curr != JsonToken.START_OBJECT) {
                throw IllegalStateException("Should be start object")
            }
            curr = p.nextToken()
            while (curr == JsonToken.FIELD_NAME) {
                val field = p.text
                p.nextToken()
                when (field) {
                    "personstatustyper" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest.Personstatustyper> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest.Personstatustyper.valueOf(p.text))
                        }
                        parsedValues.personstatustyper = list
                      }

                    "doedsaarFraOgMed" -> parsedValues.doedsaarFraOgMed = p.text
                    "doedsaarTilOgMed" -> parsedValues.doedsaarTilOgMed = p.text
                    "foedselsaarFraOgMed" -> parsedValues.foedselsaarFraOgMed = p.text
                    "foedselsaarTilOgMed" -> parsedValues.foedselsaarTilOgMed = p.text

                    "kjoenn" -> parsedValues.kjoenn = Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest.Kjoenn.valueOf(p.text)
                    "kommunenummer" -> parsedValues.kommunenummer = Folkeregisterettilgjengeliggjoeringuttrekkv1requestKommunenummer.deserializer.deserialize(p, ctx)

                    "sivilstandstype" -> parsedValues.sivilstandstype = Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest.Sivilstandstype.valueOf(p.text)
                    "statsborgerskap" -> parsedValues.statsborgerskap = p.text

                    else -> p.skipChildren()
                }
                curr = p.nextToken()
            }
            return Folkeregisterettilgjengeliggjoeringuttrekkv1requestTilpassetUttrekkJobbRequest(
                personstatustyper = parsedValues.personstatustyper!!,
                doedsaarFraOgMed = parsedValues.doedsaarFraOgMed,
                doedsaarTilOgMed = parsedValues.doedsaarTilOgMed,
                foedselsaarFraOgMed = parsedValues.foedselsaarFraOgMed,
                foedselsaarTilOgMed = parsedValues.foedselsaarTilOgMed,
                kjoenn = parsedValues.kjoenn,
                kommunenummer = parsedValues.kommunenummer,
                sivilstandstype = parsedValues.sivilstandstype,
                statsborgerskap = parsedValues.statsborgerskap,)
        }
    }
    companion object {
        val deserializer by lazy(LazyThreadSafetyMode.NONE) { Deserializer() }
    }

}

