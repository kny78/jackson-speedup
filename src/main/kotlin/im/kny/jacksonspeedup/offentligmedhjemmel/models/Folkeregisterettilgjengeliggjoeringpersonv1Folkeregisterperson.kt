/**
 * Folkeregisteret - offentlig med hjemmel
 *
 * Dokumentasjonen av tjenestene via swaggerhub er under testing.  Beskrivelsene under dokumenterer rettighetspakken Offentlig med hjemmel.  Tilgang til API-et styres med OAuth2-baserte access_tokens.  Mer informasjon om tjenestene, hvordan du får tilgang og finnes på [folkeregisteret-api-dokumentasjon](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/konsumenttjenester/)  Dokumentasjonen kan foreløpig ikke benyttes til kall mot Folkeregisterets testmiljøer.
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package im.kny.jacksonspeedup.offentligmedhjemmel.models

import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1BibeholdAvNorskStatsborgerskap
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Bostedsadresse
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1DeltBosted
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Doedsfall
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1FalskIdentitet
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Familierelasjon
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Foedsel
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1FoedselINorge
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisteridentifikator
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterpersonnavn
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterpersonstatus
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Foreldreansvar
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1GraderingAvAdresse
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Identifikasjonsdokument
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Identitetsgrunnlag
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1InnflyttingTilNorge
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Kontaktadresse
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1KontaktadresseIUtlandet
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1KontaktinformasjonForDoedsbo
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Opphold
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1OppholdPaaSvalbard
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Oppholdsadresse
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Personidentifikasjon
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Personkjoenn
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1PreferertKontaktadresse
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1SametingetsValgmanntall
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1SamiskSpraak
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Sivilstand
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1Statsborgerskap
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1UtflyttingFraNorge
import im.kny.jacksonspeedup.offentligmedhjemmel.models.Folkeregisterettilgjengeliggjoeringpersonv1VergemaalRepresentasjonEllerFremtidsfullmakt

import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonParser
import com.fasterxml.jackson.core.JsonToken
import com.fasterxml.jackson.databind.DeserializationContext
import com.fasterxml.jackson.databind.JsonDeserializer
import com.fasterxml.jackson.databind.type.*


/**
 * 
 *
 * @param adressebeskyttelse 
 * @param bibehold 
 * @param bostedsadresse 
 * @param brukAvSamiskSpraak 
 * @param deltBosted 
 * @param doedsfall 
 * @param falskIdentitet 
 * @param familierelasjon 
 * @param foedsel 
 * @param foedselINorge 
 * @param foreldreansvar 
 * @param forholdTilSametingetsValgmanntall 
 * @param identifikasjonsnummer 
 * @param identitetsgrunnlag 
 * @param innflytting 
 * @param kjoenn 
 * @param kontaktinformasjonForDoedsbo 
 * @param legitimasjonsdokument 
 * @param navn 
 * @param opphold 
 * @param oppholdPaaSvalbard 
 * @param oppholdsadresse 
 * @param postadresse 
 * @param postadresseIUtlandet 
 * @param preferertKontaktadresse 
 * @param sivilstand 
 * @param statsborgerskap 
 * @param status 
 * @param utenlandskPersonidentifikasjon 
 * @param utflytting 
 * @param utlendingsmyndighetenesIdentifikasjonsnummer 
 * @param vergemaalEllerFremtidsfullmakt 
 */

data class Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterperson (

    @field:JsonProperty("adressebeskyttelse")
    val adressebeskyttelse: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1GraderingAvAdresse>? = null,

    @field:JsonProperty("bibehold")
    val bibehold: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1BibeholdAvNorskStatsborgerskap>? = null,

    @field:JsonProperty("bostedsadresse")
    val bostedsadresse: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Bostedsadresse>? = null,

    @field:JsonProperty("brukAvSamiskSpraak")
    val brukAvSamiskSpraak: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1SamiskSpraak>? = null,

    @field:JsonProperty("deltBosted")
    val deltBosted: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1DeltBosted>? = null,

    @field:JsonProperty("doedsfall")
    val doedsfall: Folkeregisterettilgjengeliggjoeringpersonv1Doedsfall? = null,

    @field:JsonProperty("falskIdentitet")
    val falskIdentitet: Folkeregisterettilgjengeliggjoeringpersonv1FalskIdentitet? = null,

    @field:JsonProperty("familierelasjon")
    val familierelasjon: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Familierelasjon>? = null,

    @field:JsonProperty("foedsel")
    val foedsel: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Foedsel>? = null,

    @field:JsonProperty("foedselINorge")
    val foedselINorge: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1FoedselINorge>? = null,

    @field:JsonProperty("foreldreansvar")
    val foreldreansvar: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Foreldreansvar>? = null,

    @field:JsonProperty("forholdTilSametingetsValgmanntall")
    val forholdTilSametingetsValgmanntall: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1SametingetsValgmanntall>? = null,

    @field:JsonProperty("identifikasjonsnummer")
    val identifikasjonsnummer: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisteridentifikator>? = null,

    @field:JsonProperty("identitetsgrunnlag")
    val identitetsgrunnlag: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Identitetsgrunnlag>? = null,

    @field:JsonProperty("innflytting")
    val innflytting: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1InnflyttingTilNorge>? = null,

    @field:JsonProperty("kjoenn")
    val kjoenn: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Personkjoenn>? = null,

    @field:JsonProperty("kontaktinformasjonForDoedsbo")
    val kontaktinformasjonForDoedsbo: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1KontaktinformasjonForDoedsbo>? = null,

    @field:JsonProperty("legitimasjonsdokument")
    val legitimasjonsdokument: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Identifikasjonsdokument>? = null,

    @field:JsonProperty("navn")
    val navn: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterpersonnavn>? = null,

    @field:JsonProperty("opphold")
    val opphold: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Opphold>? = null,

    @field:JsonProperty("oppholdPaaSvalbard")
    val oppholdPaaSvalbard: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1OppholdPaaSvalbard>? = null,

    @field:JsonProperty("oppholdsadresse")
    val oppholdsadresse: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Oppholdsadresse>? = null,

    @field:JsonProperty("postadresse")
    val postadresse: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Kontaktadresse>? = null,

    @field:JsonProperty("postadresseIUtlandet")
    val postadresseIUtlandet: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1KontaktadresseIUtlandet>? = null,

    @field:JsonProperty("preferertKontaktadresse")
    val preferertKontaktadresse: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1PreferertKontaktadresse>? = null,

    @field:JsonProperty("sivilstand")
    val sivilstand: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Sivilstand>? = null,

    @field:JsonProperty("statsborgerskap")
    val statsborgerskap: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Statsborgerskap>? = null,

    @field:JsonProperty("status")
    val status: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterpersonstatus>? = null,

    @field:JsonProperty("utenlandskPersonidentifikasjon")
    val utenlandskPersonidentifikasjon: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Personidentifikasjon>? = null,

    @field:JsonProperty("utflytting")
    val utflytting: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1UtflyttingFraNorge>? = null,

    @field:JsonProperty("utlendingsmyndighetenesIdentifikasjonsnummer")
    val utlendingsmyndighetenesIdentifikasjonsnummer: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1Personidentifikasjon>? = null,

    @field:JsonProperty("vergemaalEllerFremtidsfullmakt")
    val vergemaalEllerFremtidsfullmakt: kotlin.collections.List<Folkeregisterettilgjengeliggjoeringpersonv1VergemaalRepresentasjonEllerFremtidsfullmakt>? = null

) {

    class ParsedValues{
        var adressebeskyttelse: List<Folkeregisterettilgjengeliggjoeringpersonv1GraderingAvAdresse>? = null
        var bibehold: List<Folkeregisterettilgjengeliggjoeringpersonv1BibeholdAvNorskStatsborgerskap>? = null
        var bostedsadresse: List<Folkeregisterettilgjengeliggjoeringpersonv1Bostedsadresse>? = null
        var brukAvSamiskSpraak: List<Folkeregisterettilgjengeliggjoeringpersonv1SamiskSpraak>? = null
        var deltBosted: List<Folkeregisterettilgjengeliggjoeringpersonv1DeltBosted>? = null
        var doedsfall: Folkeregisterettilgjengeliggjoeringpersonv1Doedsfall? = null
        var falskIdentitet: Folkeregisterettilgjengeliggjoeringpersonv1FalskIdentitet? = null
        var familierelasjon: List<Folkeregisterettilgjengeliggjoeringpersonv1Familierelasjon>? = null
        var foedsel: List<Folkeregisterettilgjengeliggjoeringpersonv1Foedsel>? = null
        var foedselINorge: List<Folkeregisterettilgjengeliggjoeringpersonv1FoedselINorge>? = null
        var foreldreansvar: List<Folkeregisterettilgjengeliggjoeringpersonv1Foreldreansvar>? = null
        var forholdTilSametingetsValgmanntall: List<Folkeregisterettilgjengeliggjoeringpersonv1SametingetsValgmanntall>? = null
        var identifikasjonsnummer: List<Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisteridentifikator>? = null
        var identitetsgrunnlag: List<Folkeregisterettilgjengeliggjoeringpersonv1Identitetsgrunnlag>? = null
        var innflytting: List<Folkeregisterettilgjengeliggjoeringpersonv1InnflyttingTilNorge>? = null
        var kjoenn: List<Folkeregisterettilgjengeliggjoeringpersonv1Personkjoenn>? = null
        var kontaktinformasjonForDoedsbo: List<Folkeregisterettilgjengeliggjoeringpersonv1KontaktinformasjonForDoedsbo>? = null
        var legitimasjonsdokument: List<Folkeregisterettilgjengeliggjoeringpersonv1Identifikasjonsdokument>? = null
        var navn: List<Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterpersonnavn>? = null
        var opphold: List<Folkeregisterettilgjengeliggjoeringpersonv1Opphold>? = null
        var oppholdPaaSvalbard: List<Folkeregisterettilgjengeliggjoeringpersonv1OppholdPaaSvalbard>? = null
        var oppholdsadresse: List<Folkeregisterettilgjengeliggjoeringpersonv1Oppholdsadresse>? = null
        var postadresse: List<Folkeregisterettilgjengeliggjoeringpersonv1Kontaktadresse>? = null
        var postadresseIUtlandet: List<Folkeregisterettilgjengeliggjoeringpersonv1KontaktadresseIUtlandet>? = null
        var preferertKontaktadresse: List<Folkeregisterettilgjengeliggjoeringpersonv1PreferertKontaktadresse>? = null
        var sivilstand: List<Folkeregisterettilgjengeliggjoeringpersonv1Sivilstand>? = null
        var statsborgerskap: List<Folkeregisterettilgjengeliggjoeringpersonv1Statsborgerskap>? = null
        var status: List<Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterpersonstatus>? = null
        var utenlandskPersonidentifikasjon: List<Folkeregisterettilgjengeliggjoeringpersonv1Personidentifikasjon>? = null
        var utflytting: List<Folkeregisterettilgjengeliggjoeringpersonv1UtflyttingFraNorge>? = null
        var utlendingsmyndighetenesIdentifikasjonsnummer: List<Folkeregisterettilgjengeliggjoeringpersonv1Personidentifikasjon>? = null
        var vergemaalEllerFremtidsfullmakt: List<Folkeregisterettilgjengeliggjoeringpersonv1VergemaalRepresentasjonEllerFremtidsfullmakt>? = null
    }
    @Suppress("UNUSED_VALUE")
    class Deserializer : JsonDeserializer<Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterperson>() {
        override fun deserialize(p: JsonParser, ctx: DeserializationContext): Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterperson {
            val parsedValues = ParsedValues()
            var curr = p.currentToken
            if (curr != JsonToken.START_OBJECT) {
                throw IllegalStateException("Should be start object")
            }
            curr = p.nextToken()
            while (curr == JsonToken.FIELD_NAME) {
                val field = p.text
                curr = p.nextToken()
                when (field) {

                    "adressebeskyttelse" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1GraderingAvAdresse> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1GraderingAvAdresse.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.adressebeskyttelse = list
                      }
                    "bibehold" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1BibeholdAvNorskStatsborgerskap> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1BibeholdAvNorskStatsborgerskap.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.bibehold = list
                      }
                    "bostedsadresse" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Bostedsadresse> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Bostedsadresse.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.bostedsadresse = list
                      }
                    "brukAvSamiskSpraak" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1SamiskSpraak> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1SamiskSpraak.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.brukAvSamiskSpraak = list
                      }
                    "deltBosted" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1DeltBosted> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1DeltBosted.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.deltBosted = list
                      }
                    "doedsfall" -> parsedValues.doedsfall = Folkeregisterettilgjengeliggjoeringpersonv1Doedsfall.deserializer.deserialize(p, ctx)
                    "falskIdentitet" -> parsedValues.falskIdentitet = Folkeregisterettilgjengeliggjoeringpersonv1FalskIdentitet.deserializer.deserialize(p, ctx)
                    "familierelasjon" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Familierelasjon> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Familierelasjon.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.familierelasjon = list
                      }
                    "foedsel" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Foedsel> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Foedsel.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.foedsel = list
                      }
                    "foedselINorge" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1FoedselINorge> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1FoedselINorge.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.foedselINorge = list
                      }
                    "foreldreansvar" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Foreldreansvar> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Foreldreansvar.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.foreldreansvar = list
                      }
                    "forholdTilSametingetsValgmanntall" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1SametingetsValgmanntall> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1SametingetsValgmanntall.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.forholdTilSametingetsValgmanntall = list
                      }
                    "identifikasjonsnummer" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisteridentifikator> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisteridentifikator.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.identifikasjonsnummer = list
                      }
                    "identitetsgrunnlag" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Identitetsgrunnlag> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Identitetsgrunnlag.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.identitetsgrunnlag = list
                      }
                    "innflytting" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1InnflyttingTilNorge> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1InnflyttingTilNorge.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.innflytting = list
                      }
                    "kjoenn" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Personkjoenn> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Personkjoenn.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.kjoenn = list
                      }
                    "kontaktinformasjonForDoedsbo" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1KontaktinformasjonForDoedsbo> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1KontaktinformasjonForDoedsbo.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.kontaktinformasjonForDoedsbo = list
                      }
                    "legitimasjonsdokument" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Identifikasjonsdokument> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Identifikasjonsdokument.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.legitimasjonsdokument = list
                      }
                    "navn" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterpersonnavn> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterpersonnavn.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.navn = list
                      }
                    "opphold" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Opphold> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Opphold.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.opphold = list
                      }
                    "oppholdPaaSvalbard" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1OppholdPaaSvalbard> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1OppholdPaaSvalbard.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.oppholdPaaSvalbard = list
                      }
                    "oppholdsadresse" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Oppholdsadresse> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Oppholdsadresse.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.oppholdsadresse = list
                      }
                    "postadresse" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Kontaktadresse> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Kontaktadresse.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.postadresse = list
                      }
                    "postadresseIUtlandet" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1KontaktadresseIUtlandet> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1KontaktadresseIUtlandet.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.postadresseIUtlandet = list
                      }
                    "preferertKontaktadresse" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1PreferertKontaktadresse> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1PreferertKontaktadresse.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.preferertKontaktadresse = list
                      }
                    "sivilstand" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Sivilstand> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Sivilstand.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.sivilstand = list
                      }
                    "statsborgerskap" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Statsborgerskap> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Statsborgerskap.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.statsborgerskap = list
                      }
                    "status" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterpersonstatus> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterpersonstatus.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.status = list
                      }
                    "utenlandskPersonidentifikasjon" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Personidentifikasjon> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Personidentifikasjon.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.utenlandskPersonidentifikasjon = list
                      }
                    "utflytting" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1UtflyttingFraNorge> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1UtflyttingFraNorge.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.utflytting = list
                      }
                    "utlendingsmyndighetenesIdentifikasjonsnummer" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1Personidentifikasjon> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1Personidentifikasjon.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.utlendingsmyndighetenesIdentifikasjonsnummer = list
                      }
                    "vergemaalEllerFremtidsfullmakt" -> {
                        val list : ArrayList<Folkeregisterettilgjengeliggjoeringpersonv1VergemaalRepresentasjonEllerFremtidsfullmakt> = ArrayList()
                        while(p.nextToken() != JsonToken.END_ARRAY) {
                            list.add(Folkeregisterettilgjengeliggjoeringpersonv1VergemaalRepresentasjonEllerFremtidsfullmakt.deserializer.deserialize(p, ctx))
                        }
                        parsedValues.vergemaalEllerFremtidsfullmakt = list
                      }

                    else -> p.skipChildren()
                }
                curr = p.nextToken()
            }
            return Folkeregisterettilgjengeliggjoeringpersonv1Folkeregisterperson(
                adressebeskyttelse = parsedValues.adressebeskyttelse,
                bibehold = parsedValues.bibehold,
                bostedsadresse = parsedValues.bostedsadresse,
                brukAvSamiskSpraak = parsedValues.brukAvSamiskSpraak,
                deltBosted = parsedValues.deltBosted,
                doedsfall = parsedValues.doedsfall,
                falskIdentitet = parsedValues.falskIdentitet,
                familierelasjon = parsedValues.familierelasjon,
                foedsel = parsedValues.foedsel,
                foedselINorge = parsedValues.foedselINorge,
                foreldreansvar = parsedValues.foreldreansvar,
                forholdTilSametingetsValgmanntall = parsedValues.forholdTilSametingetsValgmanntall,
                identifikasjonsnummer = parsedValues.identifikasjonsnummer,
                identitetsgrunnlag = parsedValues.identitetsgrunnlag,
                innflytting = parsedValues.innflytting,
                kjoenn = parsedValues.kjoenn,
                kontaktinformasjonForDoedsbo = parsedValues.kontaktinformasjonForDoedsbo,
                legitimasjonsdokument = parsedValues.legitimasjonsdokument,
                navn = parsedValues.navn,
                opphold = parsedValues.opphold,
                oppholdPaaSvalbard = parsedValues.oppholdPaaSvalbard,
                oppholdsadresse = parsedValues.oppholdsadresse,
                postadresse = parsedValues.postadresse,
                postadresseIUtlandet = parsedValues.postadresseIUtlandet,
                preferertKontaktadresse = parsedValues.preferertKontaktadresse,
                sivilstand = parsedValues.sivilstand,
                statsborgerskap = parsedValues.statsborgerskap,
                status = parsedValues.status,
                utenlandskPersonidentifikasjon = parsedValues.utenlandskPersonidentifikasjon,
                utflytting = parsedValues.utflytting,
                utlendingsmyndighetenesIdentifikasjonsnummer = parsedValues.utlendingsmyndighetenesIdentifikasjonsnummer,
                vergemaalEllerFremtidsfullmakt = parsedValues.vergemaalEllerFremtidsfullmakt,)
        }
    }
    companion object {
        val deserializer by lazy(LazyThreadSafetyMode.NONE) { Deserializer() }
    }

}

